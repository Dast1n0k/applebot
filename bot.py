import telebot 
import config 
from telebot import types
from string import Template



bot = telebot.TeleBot(config.TOKEN)


user_dict = {}


class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'driverSeria', 'repairs']
        
        for key in keys:
            self.key = None



# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def welcome(message):

    sti = open('static/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("iPhone 7")
    item2 = types.KeyboardButton("iPhone 7+")
    item3 = types.KeyboardButton("iPhone 8")
    item4 = types.KeyboardButton("iPhone X")
    item5 = types.KeyboardButton("iPhone Xr")
    item6 = types.KeyboardButton("Airpods")
    item7 = types.KeyboardButton("Lightning")
    item8 = types.KeyboardButton("–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ")
    item9 = types.KeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìÉ")
    item10 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç üîß")
    

    markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10)
 
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)


 
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'iPhone 7':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("iPhone 7 32gb", callback_data='Iphone7 32')
            item2 = types.InlineKeyboardButton("iPhone 7 128gb", callback_data='Iphone7 128')
            
            markup.add(item1, item2)
 
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)



        elif message.text == 'iPhone 7+':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("iPhone 7+ 32gb", callback_data='Iphone7plus 32')
            item2 = types.InlineKeyboardButton("iPhone 7+ 128gb", callback_data='Iphone7plus 128')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)




        elif message.text == 'iPhone 8':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("iPhone 8 64gb", callback_data='Iphone8 64')
            item2 = types.InlineKeyboardButton("iPhone 8 64gb (–ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞)", callback_data='Iphone8 2 64')
            item3 = types.InlineKeyboardButton("iPhone 8+ 64gb", callback_data='Iphone8plus 64')
            
            markup.add(item1, item2, item3)
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞—Å –∏–Ω—Ç—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)




        elif message.text == 'iPhone X':

            bot.send_message(message.chat.id, 'iPhone X 64gb')
            bot.send_message(message.chat.id, '555$ üí∏')



            
        elif message.text == 'iPhone Xr':

            bot.send_message(message.chat.id, 'iPhone Xr 64gb')
            bot.send_message(message.chat.id, '575$ üí∏')
            

   
        elif message.text == 'Airpods':
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("AirPods 1", callback_data='1st')
            item2 = types.InlineKeyboardButton("AirPods 2", callback_data='2gen')
            item3 = types.InlineKeyboardButton("AirPods Pro", callback_data='pro')
 
            markup.add(item1, item2, item3)
 
            bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –≤–∞c –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)




        elif message.text == 'Lightning':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ü–æ—à—Ç—É—á–Ω–æ", callback_data='1it')
            item2 = types.InlineKeyboardButton("–û–ø—Ç–æ–º", callback_data='opt')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–ß—Ç–æ –≤–∞c –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)

        elif message.text == '–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ':

            bot.send_message(message.chat.id, '–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ –Ω–∞ –ª—é–±—É—é –º–æ–¥–µ–ª—å iPhone üì≤')
            bot.send_message(message.chat.id, '250 –≥—Ä–Ω')

        elif message.text == '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç üîß':
            chat_id = message.chat.id
            user_dict[chat_id] = User(message.text)
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove(selective=False)


            msg = bot.send_message(chat_id, '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ', reply_markup=markup)
            bot.register_next_step_handler(msg, process_fullname_repairs)
            




        #–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ 
        elif message.text == '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìÉ':

                
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                itembtn1 = types.KeyboardButton('–ö–∏–µ–≤')
                itembtn2 = types.KeyboardButton('–û–¥–µ—Å—Å–∞')
                itembtn3 = types.KeyboardButton('–•–∞—Ä—å–∫–æ–≤')
                itembtn4 = types.KeyboardButton('–î–Ω–µ–ø—Ä')
                itembtn5 = types.KeyboardButton('–ó–∞–ø–æ—Ä–æ–∂—å–µ')
                itembtn6 = types.KeyboardButton('–õ—å–≤–æ–≤')
                markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6)


                msg = bot.send_message(message.chat.id, '–í–∞—à –≥–æ—Ä–æ–¥?', reply_markup=markup)
                bot.register_next_step_handler(msg, process_city_step)


        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')




#–†–µ–º–æ–Ω—Ç 
#–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
def process_fullname_repairs(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text


        msg = bot.send_message(chat_id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(msg, process_phone_repairs)


    except Exception as e:
        bot.reply_to(message, 'ooops!!')


#–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å 
def process_phone_repairs(message):
    try:
        int(message.text)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text
        msg = bot.send_message(message.chat.id, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
        bot.register_next_step_handler(msg, process_repairs_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')


#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
def process_repairs_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.repairs = message.text

    
    # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    bot.send_message(chat_id, getOrderData(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode="Markdown")

    #sticker
    sti = open('static/phone.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("iPhone 7")
    item2 = types.KeyboardButton("iPhone 7+")
    item3 = types.KeyboardButton("iPhone 8")
    item4 = types.KeyboardButton("iPhone X")
    item5 = types.KeyboardButton("iPhone Xr")
    item6 = types.KeyboardButton("Airpods")
    item7 = types.KeyboardButton("Lightning")
    item8 = types.KeyboardButton("–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ")
    item9 = types.KeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìÉ")
    item10 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç üîß")
    markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤–∞—Å –µ—â—ë –∏–Ω—Ç—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
    bot.send_message(config.chat_id, getOrderData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown")



# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getOrderData(user, title, name):
    t = Template('$title *$name* \n –ó–∞—è–≤–∫–∞: *$userCity* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: *$repairs* \n *–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–∏–º—Å—è, –∂–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞!*')


    return t.substitute({
        'title': title,
        'name': name,
        'userCity': user.city,
        'fullname': user.fullname,
        'phone': user.phone,
        'repairs': user.repairs
        
    })





#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
#–§–ò–û
def process_city_step(message):
    try:

        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)
        # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove(selective=False)


        msg = bot.send_message(chat_id, '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_fullname_step)


    except Exception as e:
        bot.reply_to(message, 'ooops!!')




#–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text


        msg = bot.send_message(chat_id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(msg, process_phone_step)


    except Exception as e:
        bot.reply_to(message, 'ooops!!')



#–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å 
def process_phone_step(message):
    try:

        int(message.text)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text


        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('iPhone 7 32gb')
        itembtn2 = types.KeyboardButton('iPhone 7 128gb')
        itembtn3 = types.KeyboardButton('iPhone 7+ 32gb')
        itembtn4 = types.KeyboardButton('iPhone 7+ 128gb')
        itembtn5 = types.KeyboardButton('iPhone 8 64gb')
        itembtn6 = types.KeyboardButton('iPhone 8 64gb(–ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞)')
        itembtn7 = types.KeyboardButton('iPhone 8+ 64gb')
        itembtn8 = types.KeyboardButton('iPhone X 64gb')
        itembtn9 = types.KeyboardButton('iPhone Xr 64gb')
        itembtn10 = types.KeyboardButton('AirPods 1')
        itembtn11 = types.KeyboardButton('AirPods 2')
        itembtn12 = types.KeyboardButton('AirPods Pro')
        itembtn13 = types.KeyboardButton('Lightning')
        itembtn14 = types.KeyboardButton('–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ')
       
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10, itembtn11, itembtn12,itembtn13,itembtn14)

        msg = bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_driverSeria_step)
        
    except Exception as e:
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)



def process_driverSeria_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.driverSeria = message.text

    
    # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    bot.send_message(chat_id, getRegData(user, '–í–∞—à –∑–∞–∫–∞–∑', message.from_user.first_name), parse_mode="Markdown")


    #sticker
    sti = open('static/phone.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)


    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardRemove(selective=False)


    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("iPhone 7")
    item2 = types.KeyboardButton("iPhone 7+")
    item3 = types.KeyboardButton("iPhone 8")
    item4 = types.KeyboardButton("iPhone X")
    item5 = types.KeyboardButton("iPhone Xr")
    item6 = types.KeyboardButton("Airpods")
    item7 = types.KeyboardButton("Lightning")
    item8 = types.KeyboardButton("–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ")
    item9 = types.KeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìÉ")
    item10 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç üîß") 

    markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤–∞—Å –µ—â—ë –∏–Ω—Ç—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)
    

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
    bot.send_message(config.chat_id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown")



# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template('$title *$name* \n –ì–æ—Ä–æ–¥: *$userCity* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –¢–æ–≤–∞—Ä: *$driverSeria* \n *–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–∏–º—Å—è, –∂–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞!*')


    return t.substitute({
        'title': title,
        'name': name,
        'userCity': user.city,
        'fullname': user.fullname,
        'phone': user.phone,
        'driverSeria': user.driverSeria
        
    })



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:


            if call.data == '1st':
                bot.send_message(call.message.chat.id, '130$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="AirPods 1",
                reply_markup=None)


            elif call.data == '2gen':
                bot.send_message(call.message.chat.id, '170$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="AirPods 2",
                reply_markup=None)


            elif call.data == 'pro':
                bot.send_message(call.message.chat.id, '300$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="AirPods Pro",
                reply_markup=None)


            elif call.data == 'Iphone7 32':
                bot.send_message(call.message.chat.id, '225$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone7 32gb",
                reply_markup=None)
                

            elif call.data == 'Iphone7 128':
                bot.send_message(call.message.chat.id, '270$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone7 128gb",
                reply_markup=None)


            elif call.data == 'Iphone7plus 32':
                bot.send_message(call.message.chat.id, '340$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone7+ 32gb",
                reply_markup=None)


            elif call.data == 'Iphone7plus 128':
                bot.send_message(call.message.chat.id, '360$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone7+ 128gb",
                reply_markup=None)


            elif call.data == 'Iphone8 64':
                bot.send_message(call.message.chat.id, '345$ üí∏')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone8 64gb",
                reply_markup=None)


            elif call.data == 'Iphone8plus 64':
                bot.send_message(call.message.chat.id, '450$ üí∏')
                # remove inline buttons
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone8+ 64gb",
                reply_markup=None)


            elif call.data == 'Iphone8 2 64':
                bot.send_message(call.message.chat.id, '335$ üí∏')
                # remove inline buttons
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone8 64gb (–ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞!)",
                reply_markup=None)

            elif call.data == '1it':
                bot.send_message(call.message.chat.id, '200 –≥—Ä–Ω')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone8 64gb (–ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞!)",
                reply_markup=None)

            elif call.data == 'opt':
                bot.send_message(call.message.chat.id, '10—à—Ç. 1000 –≥—Ä–Ω')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Iphone8 64gb (–ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞!)",
                reply_markup=None)
         
            # show alert
            #bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                #text="–Ø –µ–±–∞–ª —Ç–µ–±—è –≤ —Ä–æ—Ç!!!")
    except Exception as e:
        print(repr(e))
# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.

bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()        

#Run
if __name__ == '__main__':
    bot.polling(none_stop=True)
